/*
  Feedline with contact pads at the ends. Lengths of the contact pads with ground connectors are included 
    in the corresponding segment lengths.
  _____                                       _____
 | |   __ \                                  / __    | |
x |  |___ >==========~======< ____|  | x
 | | ____/                                  \_____ | |

    Or a flux bias line (see Kelley's thesis)
__
|  |________                                _____
|   _________\                          / __    | |
x  |     ______>=====~======< ____|  | x
|   |    |_____/                          \_____ | |
|__|
    
*/

#include "wiring.layout"
#include "auxx.layout"

    int pad_len  = 200e3;
    int w_pad = 200e3;
    int g_pad = 120e3;
    int bottom_g_pad = g_pad; 
    int transition_len = 150e3;
    int ground_connector_width = 50e3;   
    int totalPadLen = ground_connector_width+bottom_g_pad+pad_len+transition_len;

    int fluxBiasLen = 0;

    
point fluxBias(cell* curCell, point anchor, int w_feed, int g_feed, string direction) {
    point cursor;
    cursor.set(anchor.x(), anchor.y()-1.5*g_feed);
    wire(curCell, protect, cursor, "r", w_q/2, g_feed);
    wire(curCell, protect, cursor, "l", w_q/2, g_feed);
    cursor.set(cursor.x(), cursor.y()-0.5*g_feed);
    wire(curCell, protect, cursor, "d", w_feed, 2*g_feed+w_feed);
    cursor.set(cursor.x()+w_feed/2, cursor.y()-0.5*w_feed);
    wire(curCell, M, cursor, "l", w_feed+g_feed, w_feed);
    cursor.set(anchor.x(), anchor.y()-2*g_feed-w_feed);
    fluxBiasLen = 2*g_feed+w_feed;
    
    rect selection;
    selection.set(anchor.x()-w_q/2, anchor.y()-2*g_feed, anchor.x()+w_q/2, anchor.y()-g_feed);
    rotateSelection(curCell, selection, anchor, direction);
    rect selection;
    selection.set(anchor.x()-w_q/2, anchor.y()-fluxBiasLen, anchor.x()+w_q/2, anchor.y()-2*g_feed);
    rotateSelection(curCell, selection, anchor, direction);
    point retPoint;
    retPoint.set(0, -fluxBiasLen);
    return rotateVector(retPoint, anchor, direction);
}

point contactPad(cell* curCell, int M, int protect, point anchor, int w_feed, int g_feed, string direction) {
    

    point cursor;
    cursor.set(anchor.x(), anchor.y() - ground_connector_width);
    
    curCell->addBox(cursor.x()-w_pad/2, cursor.y()-bottom_g_pad, w_pad, -pad_len, M);
    pointArray ps;
    ps.attach(cursor.x()-w_pad/2, cursor.y()-pad_len-bottom_g_pad);
    ps.attach(cursor.x()-w_feed/2, cursor.y()-pad_len-transition_len-bottom_g_pad);
    ps.attach(cursor.x()+w_feed/2, cursor.y()-pad_len-transition_len-bottom_g_pad);
    ps.attach(cursor.x()+w_pad/2, cursor.y()-pad_len-bottom_g_pad);
    curCell->addPolygon(ps, M);
    
    curCell->addBox(cursor.x()-w_pad/2-g_pad, cursor.y(), w_pad+2*g_pad, -pad_len-bottom_g_pad, protect);
    pointArray ps;
    ps.attach(cursor.x()-w_pad/2-g_pad, cursor.y()-pad_len-bottom_g_pad);
    ps.attach(cursor.x()-w_feed/2-g_feed, cursor.y()-pad_len-transition_len-bottom_g_pad);
    ps.attach(cursor.x()+w_feed/2+g_feed, cursor.y()-pad_len-transition_len-bottom_g_pad);
    ps.attach(cursor.x()+w_pad/2+g_pad, cursor.y()-pad_len-bottom_g_pad);
    
    curCell->addPolygon(ps,  protect);
    
    rect selection;
    selection.set(anchor.x()-w_pad/2-g_pad, anchor.y()-totalPadLen, anchor.x()+w_pad/2+g_pad, anchor.y());
    rotateSelection(curCell, selection, anchor, direction);
    point retPoint;
    retPoint.set(0, -totalPadLen);
    return rotateVector(retPoint, anchor, direction);
}


void addFeedline(cell* curCell, point start, int w_feed, int g_feed, intList segmentLengths, stringList directions, string type) {
    
    int turnRad = 10*w_feed;
    int N_turns = directions.size()-1;
    int i;
    point cursor;
    if (type=="cp") {
        start = contactPad(curCell, M, protect, start, w_feed, g_feed, directions.at(0));
        segmentLengths.set(0, segmentLengths.at(0) - totalPadLen);
    }
    else if (type=="fb") {
        start = fluxBias(curCell, start, w_feed, g_feed, directions.at(0));
        segmentLengths.set(0, segmentLengths.at(0) - fluxBiasLen);
    }

    if(N_turns==0) {
        cursor = start;
        turnRad = 0;
    }
    else {  
        wire(curCell, M, start, directions.at(0), segmentLengths.at(0) - turnRad, w_feed);
        cursor = wire(curCell, protect, start, directions.at(0), segmentLengths.at(0) - turnRad, w_feed+2*g_feed);
        torusTurn(curCell, M, cursor, directions.at(0)+directions.at(1), turnRad, w_feed);
        cursor = torusTurn(curCell, protect, cursor, directions.at(0)+directions.at(1), turnRad, w_feed+2*g_feed);    
    }
    for (i=1; i<N_turns; i++) {
        wire(curCell, M, cursor, directions.at(i), segmentLengths.at(i) - 2*turnRad, w_feed);
        cursor = wire(curCell, protect, cursor, directions.at(i), segmentLengths.at(i) - 2*turnRad, w_feed+2*g_feed);
        torusTurn(curCell, M, cursor, directions.at(i)+directions.at(i+1), turnRad, w_feed);
        cursor = torusTurn(curCell, protect, cursor, directions.at(i)+directions.at(i+1), turnRad, w_feed+2*g_feed);
    }
    wire(curCell, M, cursor, directions.at(N_turns), segmentLengths.at(N_turns) - turnRad- totalPadLen, w_feed);
    cursor = wire(curCell, protect, cursor, directions.at(N_turns), segmentLengths.at(N_turns) - turnRad- totalPadLen, w_feed+2*g_feed);
    
    string direction = directions.at(N_turns);
    point vec;
    vec.set(0, -totalPadLen);
    cursor = rotateVector(vec, cursor, direction);
    
    contactPad(curCell, M, protect, cursor, w_feed, g_feed, opposite(direction));
    
    
    
    
}
