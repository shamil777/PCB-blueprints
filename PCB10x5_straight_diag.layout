#!/usr/bin/layout
#name=XMon resonators
#help=Creates svaston resonator design

#include "ground.layout"
#include "layersSetup.layout"
#include "smp.layout" 
#include "wiring.layout"

        int M = 0;
        int protect = 2;
        int ground = 3;
        int mask = 4;
        int total = 5;
        int aux = 6;
        int aux2 = 7;
        int aux3 = 8;
        int aux4 = 9;
        
        int r_smps = 23e6/2;
        int r_feed = 0.75e6;
        int w_feed = 300e3;
        int g_feed = 150e3;
        int g_protect = 2*g_feed+w_feed;
        
        int w_sample_hole = 10.5e6;
        int h_sample_hole = 5.5e6;

int main() {

    setupLayers();
    layout->drawing->selectAll();
    layout->drawing->deleteSelect();
    layout->drawing->deselectAll();

    cell *curCell = layout->drawing->currentCell;
    
    add_PCB_ground(curCell, w_sample_hole, h_sample_hole);
    
    point cursor;
    for (int i=0; i<8; i++) {
        
        cursor.set(r_smps*math::cos(2*math::pi/8.*i), r_smps*math::sin(2*math::pi/8.*i));
        cursor = add_SMP_with_transformer(curCell, cursor, w_feed, g_feed, -180/2+2*180/8.*i);
        
        point center;

    
        if (i == 0) {
            wire(curCell, M, cursor, "l", cursor.x()-w_sample_hole/2, w_feed);    
            wire(curCell, protect, cursor, "l", cursor.x()-w_sample_hole/2, g_protect);
        } if (i == 1) {
            double L_wire = (cursor.y() - h_sample_hole/2.)*math::sqrt(2)- r_feed;
            wire(curCell, M, cursor, "dl", L_wire, w_feed);
            cursor = wire(curCell, protect, cursor, "dl", L_wire, g_protect);
            center.set(cursor.x()+r_feed*math::sqrt(2)/2., h_sample_hole/2);
            curCell->addPolygonArc(center, r_feed-w_feed/2, r_feed+w_feed/2, 135, 180, M);
            curCell->addPolygonArc(center, r_feed-g_protect/2, r_feed+g_protect/2, 135, 180, protect);
            
        }  if (i == 2) {
            wire(curCell, M, cursor, "d", cursor.y()-h_sample_hole/2, w_feed);    
            wire(curCell, protect, cursor, "d", cursor.y()-h_sample_hole/2, g_protect);
         } if (i == 3) {
            center.set(cursor.x() + r_feed*math::sqrt(2)/2,cursor.y() + r_feed*math::sqrt(2)/2 );
            curCell->addPolygonArc(center, r_feed-w_feed/2, r_feed+w_feed/2, -135, -90, M);
            curCell->addPolygonArc(center, r_feed-g_protect/2, r_feed+g_protect/2, -135, -90, protect);
            
            int next_r_feed = center.y() - r_feed - h_sample_hole/2; 
            center.set(center.x(), h_sample_hole/2);
            curCell->addPolygonArc(center, next_r_feed-w_feed/2, next_r_feed+w_feed/2, 0, 90, M);
            curCell->addPolygonArc(center, next_r_feed-g_protect/2, next_r_feed+g_protect/2, 0, 90, protect);
            
        } if (i == 4) {
            wire(curCell, M, cursor, "r", -cursor.x()-w_sample_hole/2, w_feed);    
            wire(curCell, protect, cursor, "r", -cursor.x()-w_sample_hole/2, g_protect);
        } if (i == 5) {
            center.set(cursor.x() + r_feed*math::sqrt(2)/2,cursor.y() - r_feed*math::sqrt(2)/2 );
            curCell->addPolygonArc(center, r_feed-w_feed/2, r_feed+w_feed/2, 90, 135, M);
            curCell->addPolygonArc(center, r_feed-g_protect/2, r_feed+g_protect/2, 90, 135, protect);
            
            int next_r_feed = - center.y() -r_feed - h_sample_hole/2; 
            center.set(center.x(), -h_sample_hole/2);
            curCell->addPolygonArc(center, next_r_feed-w_feed/2, next_r_feed+w_feed/2, -90, 0, M);
            curCell->addPolygonArc(center, next_r_feed-g_protect/2, next_r_feed+g_protect/2, -90, 0, protect);
            
        }  if (i == 6) {
            wire(curCell, M, cursor, "u", -cursor.y()-h_sample_hole/2, w_feed);    
            wire(curCell, protect, cursor, "u", -cursor.y()-h_sample_hole/2, g_protect);
        }if (i == 7) {
            center.set(cursor.x() - r_feed*math::sqrt(2)/2,cursor. y() - r_feed*math::sqrt(2)/2 );
            curCell->addPolygonArc(center, r_feed-w_feed/2, r_feed+w_feed/2, 45, 90, M);
            curCell->addPolygonArc(center, r_feed-g_protect/2, r_feed+g_protect/2, 45, 90, protect);
            
            int next_r_feed = - center.y() -r_feed - h_sample_hole/2; 
            center.set(center.x(), -h_sample_hole/2);
            curCell->addPolygonArc(center, next_r_feed-w_feed/2, next_r_feed+w_feed/2, -180, -90, M);
            curCell->addPolygonArc(center, next_r_feed-g_protect/2, next_r_feed+g_protect/2, -180, -90, protect);
        }
    }
        
    
    
    
    

}
