#!/usr/bin/layout
#name=XMon resonators
#help=Creates svaston resonator design

#include "ground.layout"
#include "layersSetup.layout"
#include "smp.layout" 
#include "wiring.layout"
#include "auxx.layout"
#include "hole.layout"
#include "vias.layout"
#include "border.layout"

        int error = 0;
        int M = 100;
        int protect = 102;
        int ground = 103;
        int bottom = 60;
        int hole = 4;
        int board=5;
        int top = 28;
        int via = 27;
        int aux = 106;
        int aux2 = 107;
        int aux3 = 108;
        int aux4 = 109;
        
        int hole_margin = 250e3;
        
        int r_PCB = 2.840e7/2;
        int r_screw_holes = 2.5e7/2;
        int delta_r_second_screw_holes = 500e3;
        int r_screw_hole = 2.3e6/2;
        double screw_holes_starting_angle = 0;//2*math::pi/16.;

        int  r_via = 150e3;
        
        int r_smps = 23e6/2;
        int smp_transition_len = 0.75e6;
        double smp_starting_angle = 2*math::pi/16.- screw_holes_starting_angle;
        
        int g_smp = w_smp;
        int r_smp = 1e6;//g_smp+w_smp/2;
        int w_hotwire_arc = 2*g_smp+w_smp;
        
        int w_feed = 260e3;
        int g_feed = 150e3;
        int g_protect = 2*g_feed+w_feed;
        
        int w_sample_hole = 10.2e6;
        int h_sample_hole = 10.2e6;
        
        int border_size = 3.2e7;
        
        int r_drill = 1e6/2;
        
void add_diagonal_lead(cell* curCell, point start, bool flip_vertically, bool flip_horizontally, double rotation_angle) {

        int r_feed = (start.y() - hole_margin-h_sample_hole/2)/math::sin(math::pi/8);
    
        point center;   
        center.set(start.x() +(start.y() - hole_margin-h_sample_hole/2)/math::tan(math::pi/8) , hole_margin+h_sample_hole/2 );
        curCell->addPolygonArc(center, r_feed-w_feed/2, r_feed+w_feed/2, 7*180/8., 180., aux2);
        curCell->addPolygonArc(center,  r_feed-g_protect/2, r_feed+g_protect/2, 7*180/8., 180., aux3);
        
        rotateLayer(curCell, aux2, newPoint(0,0), rotation_angle);
        rotateLayer(curCell, aux3, newPoint(0,0), rotation_angle);
        
        if (flip_vertically) {
            curCell->selectLayer(aux2);
            curCell->selectLayer(aux3);
            curCell->mirrorSelect(newPoint(-10, 0), newPoint(0,0));
        } 
        
        if (flip_horizontally) {
            curCell->selectLayer(aux2);
            curCell->selectLayer(aux3);
            curCell->mirrorSelect(newPoint(0, -10e6), newPoint(0,10e6));
        }
        
        
        curCell->deselectAll();
        
        layout->booleanTool->boolOnLayer(aux2, M, M, "A+B", 0, 0, 0);
        layout->booleanTool->boolOnLayer(aux3, protect, protect, "A+B", 0, 0, 0);
        
        clearAllAuxiliaryAux(curCell);
}

int main() {

    setup::circularDefault = 5;
    pcbLayerSetup();
    layout->drawing->selectAll();
    layout->drawing->deleteSelect();
    layout->drawing->deselectAll();

    cell *curCell = layout->drawing->currentCell;
    
    add_PCB_ground_top(curCell);
    
    point cursor;        
    
    for (int i=0; i<8; i++) {
        
        int angle_delta = 180/10;
        double rotation_angle = 2*math::pi/8.*i+smp_starting_angle;
        
        cursor.set(r_smps*math::cos(rotation_angle), r_smps*math::sin(rotation_angle));
        cursor = add_SMP_with_transformer(curCell, cursor, w_feed, g_feed, smp_transition_len, -90+rotation_angle/math::pi*180);
        
        if (i == 1) {
            add_diagonal_lead(curCell, cursor, false, false, 0);
            add_diagonal_lead(curCell, cursor, false, true, 0);
            add_diagonal_lead(curCell, cursor, true, true, 0);
            add_diagonal_lead(curCell, cursor, true, false, 0);  

            add_diagonal_lead(curCell, cursor, false, false, -90);
            add_diagonal_lead(curCell, cursor, false, true, -90);
            add_diagonal_lead(curCell, cursor, true, true, -90);
            add_diagonal_lead(curCell, cursor, true, false, -90);  
        } 
    }
    
    add_PCB_hole(curCell);
    
    layout->booleanTool->boolOnLayer(ground, protect, aux, "A-B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(aux, M, top, "A+B", 0, 0, 0);
    
    add_PCB_ground_bottom(curCell);
    
    clearLayer(curCell, aux);
    
    add_vias(curCell);
    
    curCell->addCircle(aux, newPoint(0,0), r_PCB+hole_margin);
    layout->booleanTool->boolOnLayer(aux, hole, board, "A-B", 0, 0, 0);
    
    clearLayer(curCell, M);
    clearLayer(curCell, protect);
    clearLayer(curCell, ground);
    clearLayer(curCell, aux);
/*    clearLayer(curCell, hole);*/
    
    curCell->addBox(-r_PCB-1e6-hole_margin, -r_PCB-1e6-hole_margin, 2*r_PCB+2e6+2*hole_margin, 2*r_PCB+2e6+2*hole_margin, aux);
    
    layers::disableUnusedLayers(layout->drawing);
    
}


